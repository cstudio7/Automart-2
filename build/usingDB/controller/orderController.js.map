{"version":3,"sources":["../../../SERVER/usingDB/controller/orderController.js"],"names":["Order","create","req","res","text","values","body","car_id","buyer","price","price_offered","status","Date","send","error","db","query","rows","order","getUpdateOrderPrice","findOneQuery","updateOneQuery","new_price_offered","params","id","orderId","old_price_offered","response","modifiedOrder"],"mappings":"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","sourcesContent":["\r\nimport '@babel/polyfill';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from '../db';\r\n\r\n\r\nconst Order = {\r\n\r\n  /**\r\n   * Create A Order\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} order object\r\n   */\r\n  async create(req, res) {\r\n    const text = `INSERT INTO\r\n      orders(id, car_id, buyer, price, price_offered, status, created_on, modified_date)\r\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8)\r\n      returning *`;\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.car_id,\r\n      req.body.buyer,\r\n      req.body.price,\r\n      req.body.price_offered,\r\n      req.body.status,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n    try {\r\n      // handling no input for creating a purchase order\r\n      if (!req.body.price_offered || !req.body.car_id) {\r\n        return res.status(400).send({ status: 400, error: 'please enter price offered and car ID' });\r\n      }\r\n      const { rows } = await db.query(text, values);\r\n      const order = (rows[0]);\r\n      return res.status(201).send({ status: 201, order });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n   * Update an Order\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} updated order\r\n   */\r\n  async getUpdateOrderPrice(req, res) {\r\n    const findOneQuery = 'SELECT * FROM orders WHERE id=$1';\r\n\r\n    const updateOneQuery = `UPDATE orders\r\n      SET car_id=$1,price=$2,price_offered=$3, old_price_offered=$4, new_price_offered=$5, modified_date=$6\r\n      WHERE id=$7 returning *`;\r\n    try {\r\n      if (!req.body.new_price_offered) {\r\n        return res.status(400).send({ status: 400, error: 'please enter new price offered and car ID' });\r\n      }\r\n      req.params.id = req.params.orderId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'order not found' });\r\n      }\r\n      if (rows[0].status === 'pending') {\r\n        req.body.old_price_offered = rows[0].price_offered;\r\n        const values = [\r\n          req.body.car_id,\r\n          req.body.price,\r\n          req.body.price_offered,\r\n          req.body.old_price_offered,\r\n          req.body.new_price_offered,\r\n          moment(new Date()),\r\n          req.params.id,\r\n\r\n        ];\r\n        const response = await db.query(updateOneQuery, values);\r\n        const modifiedOrder = response.rows[0];\r\n        return res.status(200).send({ status: 200, modifiedOrder });\r\n      }\r\n\r\n      return res.status(404).send({ status: 404, error: `cannot update price, status is ${rows[0].status}` });\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n};\r\n\r\nexport default Order;\r\n"],"file":"orderController.js"}