{"version":3,"sources":["../../../SERVER/usingDB/controller/carController.js"],"names":["Car","create","req","res","text","values","body","manufacturer","owner","model","price","state","status","body_type","Date","db","query","rows","data","send","error","getOne","params","id","carId","car","getUpdatePrice","findOneQuery","updateOneQuery","response","updatedAd","err","getAll","findAllQuery","min_price","max_price","carRange","message","getUpdateStatus","modifiedAdStatus","deleteQuery"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from '../db';\r\n\r\nconst Car = {\r\n\r\n  /**\r\n * Create A Car Ad\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} car object\r\n */\r\n  async create(req, res) {\r\n    const text = `INSERT INTO\r\n    cars(id, manufacturer, owner, model, price, state, status, body_type, created_on, modified_date)\r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      returning *`;\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.manufacturer,\r\n      req.body.owner,\r\n      req.body.model,\r\n      req.body.price,\r\n      req.body.state,\r\n      req.body.status,\r\n      req.body.body_type,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n      const data = rows[0];\r\n      return res.status(201).send({ status: 201, data });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n\r\n  /**\r\n * View a specific Car\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} car object\r\n */\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM cars WHERE id = $1';\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(text, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car not found' });\r\n      }\r\n      const car = rows[0];\r\n      return res.status(200).send({ status: 200, car });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n  * Update price of Car Ad\r\n  * @param {object} req\r\n  * @param {object} res\r\n  * @returns {object} update price of Car Ad\r\n  */\r\n  async getUpdatePrice(req, res) {\r\n    const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n    const updateOneQuery = `UPDATE cars\r\n      SET price=$1, modified_date=$2\r\n      WHERE id=$3 returning *`;\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car not found' });\r\n      }\r\n      const values = [\r\n        req.body.price,\r\n        moment(new Date()),\r\n        req.params.id,\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      const updatedAd = response.rows[0];\r\n      return res.status(200).send({ status: 200, updatedAd });\r\n    } catch (err) {\r\n      return res.status(400).send({ status: 400, err });\r\n    }\r\n  },\r\n\r\n  /**\r\n * Filter Cars by input query\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} cars array\r\n */\r\n  async getAll(req, res) {\r\n    if (req.query.status === 'available') {\r\n      // return all new available cars\r\n      if (req.query.state === 'new') {\r\n        const findAllQuery = \"SELECT * FROM cars WHERE status = 'available' AND state = 'new'\";\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all used available cars\r\n      if (req.query.state === 'used') {\r\n        const findAllQuery = \"SELECT * FROM cars WHERE status = 'available' AND state = 'used'\";\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all available Car Ads of specified make (manufacturer)\r\n      if (req.query.manufacturer) {\r\n        const findAllQuery = `SELECT * FROM cars WHERE status = 'available' AND manufacturer = '${req.query.manufacturer}' `;\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ status: 200, rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all available car Ads within a specified price range\r\n      if (req.query.min_price) {\r\n        const findAllQuery = `SELECT * FROM cars WHERE status = 'available' AND price BETWEEN '${req.query.min_price}' AND '${req.query.max_price}' `;\r\n        // try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        const carRange = rows;\r\n        return res.status(200).send({ status: 200, carRange });\r\n        // } catch (error) {\r\n        //   return res.status(400).send({ status: 400, error });\r\n        // }\r\n      }\r\n      // Return all available car Ads\r\n      const findAllQuery = \"SELECT * FROM cars WHERE status = 'available'\";\r\n      try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        if (rows === []) {\r\n          return res.status(200).send({ status: 201, message: 'No available Car Ads' });\r\n        }\r\n        return res.status(200).send({ status: 200, rows });\r\n      } catch (error) {\r\n        return res.status(400).send({ status: 400, error });\r\n      }\r\n    }\r\n    // return all car Ads with specific body type\r\n    if (req.query.body_type) {\r\n      const findAllQuery = `SELECT * FROM cars WHERE  body_type = '${req.query.body_type}'`;\r\n      try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        return res.status(200).send({ status: 200, rows });\r\n      } catch (error) {\r\n        return res.status(400).send({ status: 400, error: `Cannot find car of ${req.query.body_type} body type` });\r\n      }\r\n    }\r\n    const findAllQuery = 'SELECT * FROM cars';\r\n    try {\r\n      const { rows } = await db.query(findAllQuery);\r\n      return res.status(200).send({ status: 200, rows });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n   * Mark a Car Ad as sold\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} updated car\r\n   */\r\n  async getUpdateStatus(req, res) {\r\n    const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n    const updateOneQuery = `UPDATE cars\r\n      SET status=$1, modified_date=$2\r\n      WHERE id=$3 returning *`;\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car Ad not found' });\r\n      }\r\n      if (rows[0].status === 'sold') {\r\n        return res.status(404).send({ status: 404, error: `Cannot update. car Ad is already ${rows[0].status}` });\r\n      }\r\n\r\n      const values = [\r\n        req.body.status,\r\n        moment(new Date()),\r\n        req.params.id,\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      const modifiedAdStatus = response.rows[0];\r\n      return res.status(200).send({ status: 200, modifiedAdStatus });\r\n    } catch (err) {\r\n      return res.status(400).send({ status: 400, err });\r\n    }\r\n  },\r\n  /*\r\n    * Delete A Car\r\n    * @param {object} req\r\n    * @param {object} res\r\n    * @returns {void} return statuc code 204\r\n    */\r\n  async delete(req, res) {\r\n    const deleteQuery = 'DELETE FROM cars WHERE id=$1 returning *';\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(deleteQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'Car Ad not found to delete' });\r\n      }\r\n\r\n      return res.status(204).send({ status: 204, message: 'Car Ad successfully deleted' });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Car;\r\n"],"file":"carController.js"}