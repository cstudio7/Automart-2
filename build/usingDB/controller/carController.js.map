{"version":3,"sources":["../../../SERVER/usingDB/controller/carController.js"],"names":["Car","create","req","res","cloudinary","config","cloud_name","process","env","CLOUD_NAME","api_key","API_KEY","api_secret","API_SECRET","files","image_url","filename","path","uploader","upload","tags","resource_type","err","console","warn","result","img_url","secure_url","text","decode","jwt","verify","headers","token","TOKEN","body","owner","id","values","manufacturer","model","price","state","status","body_type","Date","send","error","db","query","rows","data","info","getOne","params","carId","getUpdatePrice","findOneQuery","updateOneQuery","response","getAll","findAllQuery","min_price","max_price","carRange","message","isAdmin","getUpdateStatus","deleteQuery"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\r\nimport cloudinary from 'cloudinary';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from '../db';\r\n\r\n\r\nconst Car = {\r\n\r\n  /**\r\n * Create A Car Ad\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} car object\r\n */\r\n\r\n  async create(req, res) {\r\n    cloudinary.config({\r\n      cloud_name: process.env.CLOUD_NAME,\r\n      api_key: process.env.API_KEY,\r\n      api_secret: process.env.API_SECRET,\r\n    });\r\n    let result;\r\n    let img_url;\r\n\r\n    // checks if Car Ad image is present to upload to cloudinary account\r\n    if (req.files) {\r\n      if (req.files.image_url) {\r\n        const filename = req.files.image_url.path;\r\n        result = await cloudinary.uploader.upload(filename, { tags: 'gotemps', resource_type: 'auto' })\r\n          .catch((err) => {\r\n            if (err) {\r\n              console.warn(err);\r\n            }\r\n          });\r\n        img_url = result.secure_url;\r\n      }\r\n    }\r\n    const text = `INSERT INTO\r\n    cars(id, manufacturer, owner, model, price, state, status, body_type, img_url, created_on, modified_date)\r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\r\n      returning *`;\r\n    // get user id from user token\r\n    const decode = jwt.verify(req.headers.token, process.env.TOKEN);\r\n    req.body.owner = decode.id;\r\n\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.manufacturer,\r\n      req.body.owner,\r\n      req.body.model,\r\n      req.body.price,\r\n      req.body.state,\r\n      req.body.status,\r\n      req.body.body_type,\r\n      img_url,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n    try {\r\n      // validation to handle no input values to post a Car Ad.\r\n      if (!req.body.price || !req.body.state) {\r\n        return res.status(400).send({ status: 400, error: 'please enter required fields' });\r\n      }\r\n      // post Car Ad\r\n      const { rows } = await db.query(text, values);\r\n      const data = rows[0];\r\n      return res.status(201).send({ status: 201, data, info: 'Car Ad successfully posted' });\r\n    } catch (err) {\r\n      return res.status(400).send({ status: 400, err });\r\n    }\r\n  },\r\n\r\n  /**\r\n * View a specific Car\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} car object\r\n */\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM cars WHERE id = $1';\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(text, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car not found' });\r\n      }\r\n      const data = rows[0];\r\n      return res.status(200).send({ status: 200, data });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n  * Update price of Car Ad\r\n  * @param {object} req\r\n  * @param {object} res\r\n  * @returns {object} update price of Car Ad\r\n  */\r\n  async getUpdatePrice(req, res) {\r\n    const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n    const updateOneQuery = `UPDATE cars\r\n      SET price=$1, modified_date=$2\r\n      WHERE id=$3 returning *`;\r\n    try {\r\n      if (!req.body.price) {\r\n        return res.status(422).send({ status: 422, error: 'please fill in required fields' });\r\n      }\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car not found' });\r\n      }\r\n      const values = [\r\n        req.body.price,\r\n        moment(new Date()),\r\n        req.params.id,\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      const data = response.rows[0];\r\n      return res.status(200).send({ status: 200, data });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n\r\n  /**\r\n * Filter Cars by input query\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} cars array\r\n */\r\n  async getAll(req, res) {\r\n    if (req.query.status === 'available') {\r\n      // return all new available cars\r\n      if (req.query.state === 'new') {\r\n        const findAllQuery = \"SELECT * FROM cars WHERE status = 'available' AND state = 'new'\";\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all used available cars\r\n      if (req.query.state === 'used') {\r\n        const findAllQuery = \"SELECT * FROM cars WHERE status = 'available' AND state = 'used'\";\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all available Car Ads of specified make (manufacturer)\r\n      if (req.query.manufacturer) {\r\n        const findAllQuery = `SELECT * FROM cars WHERE status = 'available' AND manufacturer = '${req.query.manufacturer}' `;\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ status: 200, rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all available car Ads within a specified price range\r\n      if (req.query.min_price) {\r\n        const findAllQuery = `SELECT * FROM cars WHERE status = 'available' AND price BETWEEN '${req.query.min_price}' AND '${req.query.max_price}' `;\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          const carRange = rows;\r\n          return res.status(200).send({ status: 200, carRange });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // Return all available car Ads\r\n      const findAllQuery = \"SELECT * FROM cars WHERE status = 'available'\";\r\n      try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        if (rows === []) {\r\n          return res.status(200).send({ status: 201, message: 'No available Car Ads' });\r\n        }\r\n        return res.status(200).send({ status: 200, rows });\r\n      } catch (error) {\r\n        return res.status(400).send({ status: 400, error });\r\n      }\r\n    }\r\n    // return all car Ads with specific body type\r\n    if (req.query.body_type) {\r\n      const findAllQuery = `SELECT * FROM cars WHERE  body_type = '${req.query.body_type}'`;\r\n      try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        return res.status(200).send({ status: 200, rows });\r\n      } catch (error) {\r\n        return res.status(400).send({ status: 400, error: `Cannot find car of ${req.query.body_type} body type` });\r\n      }\r\n    }\r\n\r\n    // view all Cars (Admins only)\r\n    try {\r\n      const decode = await jwt.verify(req.headers.token, process.env.TOKEN);\r\n      const result = decode.isAdmin;\r\n\r\n      if (result === 'false') {\r\n        return res.status(400).send({ status: 400, error: 'User is not Admin' });\r\n      }\r\n      const findAllQuery = 'SELECT * FROM cars';\r\n\r\n      const { rows } = await db.query(findAllQuery);\r\n      const data = rows;\r\n      return res.status(200).send({ status: 200, data });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n   * Mark a Car Ad as sold\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} updated car\r\n   */\r\n  async getUpdateStatus(req, res) {\r\n    const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n    const updateOneQuery = `UPDATE cars\r\n      SET status=$1, modified_date=$2\r\n      WHERE id=$3 returning *`;\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car Ad not found' });\r\n      }\r\n      if (rows[0].status === 'sold') {\r\n        return res.status(404).send({ status: 404, error: `Cannot update. car Ad is already ${rows[0].status}` });\r\n      }\r\n\r\n      const values = [\r\n        req.body.status,\r\n        moment(new Date()),\r\n        req.params.id,\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      const data = response.rows[0];\r\n      return res.status(200).send({ status: 200, data });\r\n    } catch (err) {\r\n      return res.status(400).send({ status: 400, err });\r\n    }\r\n  },\r\n  /*\r\n    * Delete A Car\r\n    * @param {object} req\r\n    * @param {object} res\r\n    * @returns {void} return statuc code 204  \r\n    */\r\n\r\n  // delete a specific Car Ad (Admins only)\r\n  async delete(req, res) {\r\n    const decode = jwt.verify(req.headers.token, process.env.TOKEN);\r\n    try {\r\n      if (decode.isAdmin === 'false') {\r\n        return res.status(400).send({ status: 400, error: 'User is not Admin' });\r\n      }\r\n      const deleteQuery = 'DELETE FROM cars WHERE id=$1 returning *';\r\n      const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'Car Ad not found to delete' });\r\n      }\r\n      await db.query(deleteQuery, [rows[0].id]);\r\n      return res.status(200).send({ status: 200, data: 'Car Ad successfully deleted' });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Car;\r\n"],"file":"carController.js"}