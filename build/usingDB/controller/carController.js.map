{"version":3,"sources":["../../../SERVER/usingDB/controller/carController.js"],"names":["Car","create","req","res","text","values","body","manufacturer","owner","model","price","state","status","body_type","Date","send","error","db","query","rows","data","getOne","params","id","carId","car","getUpdatePrice","findOneQuery","updateOneQuery","response","updatedAd","err","getAll","findAllQuery","min_price","max_price","carRange","message","getUpdateStatus","modifiedAdStatus","deleteQuery"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from '../db';\r\n\r\nconst Car = {\r\n\r\n  /**\r\n * Create A Car Ad\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} car object\r\n */\r\n  async create(req, res) {\r\n    const text = `INSERT INTO\r\n    cars(id, manufacturer, owner, model, price, state, status, body_type, created_on, modified_date)\r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      returning *`;\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.manufacturer,\r\n      req.body.owner,\r\n      req.body.model,\r\n      req.body.price,\r\n      req.body.state,\r\n      req.body.status,\r\n      req.body.body_type,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n    try {\r\n      // handling no input values to post a Car Ad.\r\n      if (!req.body.price || !req.body.state || !req.body.manufacturer) {\r\n        return res.status(400).send({ status: 400, error: 'please enter required fields' });\r\n      }\r\n      const { rows } = await db.query(text, values);\r\n      const data = rows[0];\r\n      return res.status(201).send({ status: 201, data });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n\r\n  /**\r\n * View a specific Car\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} car object\r\n */\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM cars WHERE id = $1';\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(text, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car not found' });\r\n      }\r\n      const car = rows[0];\r\n      return res.status(200).send({ status: 200, car });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n  * Update price of Car Ad\r\n  * @param {object} req\r\n  * @param {object} res\r\n  * @returns {object} update price of Car Ad\r\n  */\r\n  async getUpdatePrice(req, res) {\r\n    const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n    const updateOneQuery = `UPDATE cars\r\n      SET price=$1, modified_date=$2\r\n      WHERE id=$3 returning *`;\r\n    try {\r\n      if (!req.body.price) {\r\n        return res.status(400).send({ status: 400, error: 'please enter required fields' });\r\n      }\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car not found' });\r\n      }\r\n      const values = [\r\n        req.body.price,\r\n        moment(new Date()),\r\n        req.params.id,\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      const updatedAd = response.rows[0];\r\n      return res.status(200).send({ status: 200, updatedAd });\r\n    } catch (err) {\r\n      return res.status(400).send({ status: 400, err });\r\n    }\r\n  },\r\n\r\n  /**\r\n * Filter Cars by input query\r\n * @param {object} req\r\n * @param {object} res\r\n * @returns {object} cars array\r\n */\r\n  async getAll(req, res) {\r\n    if (req.query.status === 'available') {\r\n      // return all new available cars\r\n      if (req.query.state === 'new') {\r\n        const findAllQuery = \"SELECT * FROM cars WHERE status = 'available' AND state = 'new'\";\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all used available cars\r\n      if (req.query.state === 'used') {\r\n        const findAllQuery = \"SELECT * FROM cars WHERE status = 'available' AND state = 'used'\";\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all available Car Ads of specified make (manufacturer)\r\n      if (req.query.manufacturer) {\r\n        const findAllQuery = `SELECT * FROM cars WHERE status = 'available' AND manufacturer = '${req.query.manufacturer}' `;\r\n        try {\r\n          const { rows } = await db.query(findAllQuery);\r\n          return res.status(200).send({ status: 200, rows });\r\n        } catch (error) {\r\n          return res.status(400).send({ status: 400, error });\r\n        }\r\n      }\r\n      // return all available car Ads within a specified price range\r\n      if (req.query.min_price) {\r\n        const findAllQuery = `SELECT * FROM cars WHERE status = 'available' AND price BETWEEN '${req.query.min_price}' AND '${req.query.max_price}' `;\r\n        // try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        const carRange = rows;\r\n        return res.status(200).send({ status: 200, carRange });\r\n        // } catch (error) {\r\n        //   return res.status(400).send({ status: 400, error });\r\n        // }\r\n      }\r\n      // Return all available car Ads\r\n      const findAllQuery = \"SELECT * FROM cars WHERE status = 'available'\";\r\n      try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        if (rows === []) {\r\n          return res.status(200).send({ status: 201, message: 'No available Car Ads' });\r\n        }\r\n        return res.status(200).send({ status: 200, rows });\r\n      } catch (error) {\r\n        return res.status(400).send({ status: 400, error });\r\n      }\r\n    }\r\n    // return all car Ads with specific body type\r\n    if (req.query.body_type) {\r\n      const findAllQuery = `SELECT * FROM cars WHERE  body_type = '${req.query.body_type}'`;\r\n      try {\r\n        const { rows } = await db.query(findAllQuery);\r\n        return res.status(200).send({ status: 200, rows });\r\n      } catch (error) {\r\n        return res.status(400).send({ status: 400, error: `Cannot find car of ${req.query.body_type} body type` });\r\n      }\r\n    }\r\n    const findAllQuery = 'SELECT * FROM cars';\r\n    try {\r\n      const { rows } = await db.query(findAllQuery);\r\n      return res.status(200).send({ status: 200, rows });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n   * Mark a Car Ad as sold\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} updated car\r\n   */\r\n  async getUpdateStatus(req, res) {\r\n    const findOneQuery = 'SELECT * FROM cars WHERE id=$1';\r\n    const updateOneQuery = `UPDATE cars\r\n      SET status=$1, modified_date=$2\r\n      WHERE id=$3 returning *`;\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'car Ad not found' });\r\n      }\r\n      if (rows[0].status === 'sold') {\r\n        return res.status(404).send({ status: 404, error: `Cannot update. car Ad is already ${rows[0].status}` });\r\n      }\r\n\r\n      const values = [\r\n        req.body.status,\r\n        moment(new Date()),\r\n        req.params.id,\r\n      ];\r\n      const response = await db.query(updateOneQuery, values);\r\n      const modifiedAdStatus = response.rows[0];\r\n      return res.status(200).send({ status: 200, modifiedAdStatus });\r\n    } catch (err) {\r\n      return res.status(400).send({ status: 400, err });\r\n    }\r\n  },\r\n  /*\r\n    * Delete A Car\r\n    * @param {object} req\r\n    * @param {object} res\r\n    * @returns {void} return statuc code 204\r\n    */\r\n  async delete(req, res) {\r\n    const deleteQuery = 'DELETE FROM cars WHERE id=$1 returning *';\r\n    try {\r\n      req.params.id = req.params.carId;\r\n      const { rows } = await db.query(deleteQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'Car Ad not found to delete' });\r\n      }\r\n\r\n      return res.status(204).send({ status: 204, message: 'Car Ad successfully deleted' });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Car;\r\n"],"file":"carController.js"}