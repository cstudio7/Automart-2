{"version":3,"sources":["../../../SERVER/usingDB/controller/userController.js"],"names":["User","create","req","res","text","body","token","jwt","sign","email","process","env","TOKEN","values","firstname","lastname","bcrypt","hashSync","password","error","hash","message","is_admin","Date","db","query","rows","user","status","send","getOne","compare","result","Authentication_failed","signedUser"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport bcrypt from 'bcrypt';\r\nimport db from '../db';\r\n\r\nconst User = {\r\n\r\n  /**\r\n   * Create A User\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} user object\r\n   */\r\n  async create(req, res) {\r\n    const text = `INSERT INTO\r\n      Users(id, token, email, firstname, lastname, password, is_admin, created_date, modified_date)\r\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n      returning *`;\r\n    req.body.token = jwt.sign(req.body.email, process.env.TOKEN);\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.token,\r\n      req.body.email,\r\n      req.body.firstname,\r\n      req.body.lastname,\r\n      // eslint-disable-next-line no-unused-vars\r\n      bcrypt.hashSync(req.body.password, 10, (error, hash) => {\r\n        if (error) {\r\n          return ({ message: 'error found' });\r\n        }\r\n        return null;\r\n      }) || '',\r\n      req.body.is_admin,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n      const user = (rows[0]);\r\n      return res.status(201).send({ status: 201, user });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n       * //sign in a user\r\n       * @param {object} req\r\n       * @param {object} res\r\n       * @returns {object} return user Object\r\n       */\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await db.query(text, [req.body.email]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: `A user with the specified ${req.body.email} was not found` });\r\n      }\r\n      bcrypt.compare(req.body.password, rows[0].password, (error, result) => {\r\n        if (error) {\r\n          return res.status(401).send({ status: 401, Authentication_failed: 'Authorization information is missing or invalid' });\r\n        } if (result) {\r\n          const signedUser = rows[0];\r\n          return res.status(200).send({ status: 200, signedUser });\r\n        }\r\n        return null;\r\n      });\r\n    } catch (error) {\r\n      return res.status(401).send({ status: 401, error: 'Please enter valid email and password' });\r\n    }\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default User;\r\n"],"file":"userController.js"}