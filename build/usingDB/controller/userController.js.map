{"version":3,"sources":["../../../SERVER/usingDB/controller/userController.js"],"names":["User","create","req","res","text","body","email","password","status","send","error","token","jwt","sign","process","env","TOKEN","values","firstname","lastname","bcrypt","hashSync","hash","message","is_admin","Date","db","query","rows","user","getOne","compare","result","Authentication_failed","signedUser"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport bcrypt from 'bcrypt';\r\nimport db from '../db';\r\n\r\nconst User = {\r\n\r\n  /**\r\n   * Create A User\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} user object\r\n   */\r\n  async create(req, res) {\r\n    const text = `INSERT INTO\r\n      Users(id, token, email, firstname, lastname, password, is_admin, created_date, modified_date)\r\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n      returning *`;\r\n    if (!req.body.email || !req.body.password) {\r\n      return res.status(400).send({ status: 400, error: 'please fill in required fields' });\r\n    }\r\n    req.body.token = jwt.sign(req.body.email, process.env.TOKEN);\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.token,\r\n      req.body.email,\r\n      req.body.firstname,\r\n      req.body.lastname,\r\n      // eslint-disable-next-line no-unused-vars\r\n      bcrypt.hashSync(req.body.password, 10, (error, hash) => {\r\n        if (error) {\r\n          return ({ message: 'error found' });\r\n        }\r\n        return null;\r\n      }) || '',\r\n      req.body.is_admin,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n      const user = (rows[0]);\r\n      return res.status(201).send({ status: 201, user });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n       * //sign in a user\r\n       * @param {object} req\r\n       * @param {object} res\r\n       * @returns {object} return user Object\r\n       */\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await db.query(text, [req.body.email]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: `A user with the specified ${req.body.email} was not found` });\r\n      }\r\n      bcrypt.compare(req.body.password, rows[0].password, (error, result) => {\r\n        if (error) {\r\n          return res.status(401).send({ status: 401, Authentication_failed: 'Authorization information is missing or invalid' });\r\n        } if (result) {\r\n          const signedUser = rows[0];\r\n          return res.status(200).send({ status: 200, signedUser });\r\n        }\r\n        return null;\r\n      });\r\n    } catch (error) {\r\n      return res.status(401).send({ status: 401, error: 'Please enter valid email and password' });\r\n    }\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default User;\r\n"],"file":"userController.js"}