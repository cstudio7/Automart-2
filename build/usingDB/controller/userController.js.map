{"version":3,"sources":["../../../SERVER/usingDB/controller/userController.js"],"names":["dotenv","config","User","create","req","res","text","body","email","password","status","send","error","payload","id","isAdmin","is_admin","options","expiresIn","secret","process","env","TOKEN","token","jwt","sign","values","first_name","last_name","bcrypt","hashSync","hash","address","Date","db","query","rows","data","getOne","compare","result","getAll","findAllQuery","deleteQuery","findOneQuery","params","userId","updatePassword","async","waterfall","done","crypto","randomBytes","err","buf","toString","user","smtpTransport","nodemailer","createTransport","service","auth","pass","GWP","mailOptions","to","from","subject","sendMail","console","log","info"],"mappings":";;;;;;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGAA,mBAAOC,MAAP;;AAGA,IAAMC,IAAI,GAAG;AAEX;;;;;;AAMMC,EAAAA,MARK;AAAA;AAAA;AAAA,6CAQEC,GARF,EAQOC,GARP;AAAA;;AAAA;AAAA;AAAA;AAAA;AASHC,cAAAA,IATG,4MAaT;;AAbS,oBAcL,CAACF,GAAG,CAACG,IAAJ,CAASC,KAAV,IAAmB,CAACJ,GAAG,CAACG,IAAJ,CAASE,QAdxB;AAAA;AAAA;AAAA;;AAAA,+CAeAJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK,EAAE;AAAtB,eAArB,CAfA;;AAAA;AAkBT;AACMC,cAAAA,OAnBG,GAmBO;AAAEL,gBAAAA,KAAK,EAAEJ,GAAG,CAACG,IAAJ,CAASC,KAAlB;AAAyBM,gBAAAA,EAAE,EAAE,oBAA7B;AAAuCC,gBAAAA,OAAO,EAAEX,GAAG,CAACG,IAAJ,CAASS;AAAzD,eAnBP;AAoBHC,cAAAA,OApBG,GAoBO;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eApBP;AAqBHC,cAAAA,MArBG,GAqBMC,OAAO,CAACC,GAAR,CAAYC,KArBlB;AAsBTlB,cAAAA,GAAG,CAACG,IAAJ,CAASgB,KAAT,GAAiBC,yBAAIC,IAAJ,CAASZ,OAAT,EAAkBM,MAAlB,EAA0BF,OAA1B,CAAjB;AAEMS,cAAAA,MAxBG,GAwBM,CACb,oBADa,EAEbtB,GAAG,CAACG,IAAJ,CAASgB,KAFI,EAGbnB,GAAG,CAACG,IAAJ,CAASC,KAHI,EAIbJ,GAAG,CAACG,IAAJ,CAASoB,UAJI,EAKbvB,GAAG,CAACG,IAAJ,CAASqB,SALI,EAMb;AACAC,iCAAOC,QAAP,CAAgB1B,GAAG,CAACG,IAAJ,CAASE,QAAzB,EAAmC,EAAnC,EAAuC,UAACG,KAAD,EAAQmB,IAAR,EAAiB;AACtD,oBAAInB,KAAJ,EAAW;AAAE,yBAAQ;AAAEA,oBAAAA,KAAK,EAAE;AAAT,mBAAR;AAAoC;;AAAC,uBAAO,IAAP;AACnD,eAFD,KAEM,EATO,EAUbR,GAAG,CAACG,IAAJ,CAASS,QAVI,EAWbZ,GAAG,CAACG,IAAJ,CAASyB,OAXI,EAYb,wBAAO,IAAIC,IAAJ,EAAP,CAZa,EAab,wBAAO,IAAIA,IAAJ,EAAP,CAba,CAxBN;AAAA;AAAA;AAAA,qBA0CgBC,eAAGC,KAAH,CAAS7B,IAAT,EAAeoB,MAAf,CA1ChB;;AAAA;AAAA;AA0CCU,cAAAA,IA1CD,QA0CCA,IA1CD;AA2CDC,cAAAA,IA3CC,GA2COD,IAAI,CAAC,CAAD,CA3CX;AAAA,+CA4CA/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAe2B,gBAAAA,IAAI,EAAJA;AAAf,eAArB,CA5CA;;AAAA;AAAA;AAAA;AAAA,+CA8CAhC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK;AAApB,eAArB,CA9CA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAiDX;;;;;;AAMM0B,EAAAA,MAvDK;AAAA;AAAA;AAAA,8CAuDElC,GAvDF,EAuDOC,GAvDP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAwDHC,cAAAA,IAxDG,GAwDI,sCAxDJ;AAAA;AAAA;AAAA,qBA0DgB4B,eAAGC,KAAH,CAAS7B,IAAT,EAAe,CAACF,GAAG,CAACG,IAAJ,CAASC,KAAV,CAAf,CA1DhB;;AAAA;AAAA;AA0DC4B,cAAAA,IA1DD,SA0DCA,IA1DD;;AAAA,kBA4DFA,IAAI,CAAC,CAAD,CA5DF;AAAA;AAAA;AAAA;;AAAA,gDA6DE/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK,6CAAsCR,GAAG,CAACG,IAAJ,CAASC,KAA/C;AAApB,eAArB,CA7DF;;AAAA;AA+DP;AACAqB,iCAAOU,OAAP,CAAenC,GAAG,CAACG,IAAJ,CAASE,QAAxB,EAAkC2B,IAAI,CAAC,CAAD,CAAJ,CAAQ3B,QAA1C,EAAoD,UAACG,KAAD,EAAQ4B,MAAR,EAAmB;AACrE,oBAAIA,MAAJ,EAAY;AACV,sBAAMH,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAjB;AACA,yBAAO/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,oBAAAA,MAAM,EAAE,GAAV;AAAe2B,oBAAAA,IAAI,EAAJA;AAAf,mBAArB,CAAP;AACD;;AACD,uBAAOhC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,kBAAAA,MAAM,EAAE,GAAV;AAAeE,kBAAAA,KAAK,EAAE;AAAtB,iBAArB,CAAP;AACD,eAND;;AAhEO;AAAA;;AAAA;AAAA;AAAA;AAAA,gDAwEAP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK,EAAE;AAAtB,eAArB,CAxEA;;AAAA;AAAA,gDA0EF,IA1EE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6EX;AACM6B,EAAAA,MA9EK;AAAA;AAAA;AAAA,8CA8EErC,GA9EF,EA8EOC,GA9EP;AAAA;;AAAA;AAAA;AAAA;AAAA;AA+EHqC,cAAAA,YA/EG,GA+EY,qBA/EZ;AAAA;AAAA;AAAA,qBAiFgBR,eAAGC,KAAH,CAASO,YAAT,CAjFhB;;AAAA;AAAA;AAiFCN,cAAAA,IAjFD,SAiFCA,IAjFD;AAAA,gDAkFA/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAe0B,gBAAAA,IAAI,EAAJA;AAAf,eAArB,CAlFA;;AAAA;AAAA;AAAA;AAAA,gDAoFA/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK,EAAE;AAAtB,eAArB,CApFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuFX;AAvFW;AAAA;AAAA;AAAA,8CAwFER,GAxFF,EAwFOC,GAxFP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AA2FDsC,cAAAA,WA3FC,GA2Fa,2CA3Fb;AA4FDC,cAAAA,YA5FC,GA4Fc,iCA5Fd;AA8FPxC,cAAAA,GAAG,CAACyC,MAAJ,CAAW/B,EAAX,GAAgBV,GAAG,CAACyC,MAAJ,CAAWC,MAA3B;AA9FO;AAAA,qBA+FgBZ,eAAGC,KAAH,CAASS,YAAT,EAAuB,CAACxC,GAAG,CAACyC,MAAJ,CAAW/B,EAAZ,CAAvB,CA/FhB;;AAAA;AAAA;AA+FCsB,cAAAA,IA/FD,SA+FCA,IA/FD;;AAAA,kBAiGFA,IAAI,CAAC,CAAD,CAjGF;AAAA;AAAA;AAAA;;AAAA,gDAkGE/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK,EAAE;AAAtB,eAArB,CAlGF;;AAAA;AAAA;AAAA,qBAoGDsB,eAAGC,KAAH,CAASQ,WAAT,EAAsB,CAACP,IAAI,CAAC,CAAD,CAAJ,CAAQtB,EAAT,CAAtB,CApGC;;AAAA;AAAA,gDAqGAT,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAe2B,gBAAAA,IAAI,EAAE;AAArB,eAArB,CArGA;;AAAA;AAAA;AAAA;AAAA,gDAuGAhC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,KAAK;AAApB,eAArB,CAvGA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2GX;AACMmC,EAAAA,cA5GK;AAAA;AAAA;AAAA,8CA4GU3C,GA5GV,EA4GeC,GA5Gf;AAAA;AAAA;AAAA;AAAA;AA6GT2C,gCAAMC,SAAN,CAAgB,CACd,UAAUC,IAAV,EAAgB;AACdC,mCAAOC,WAAP,CAAmB,EAAnB,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,sBAAM/B,KAAK,GAAG+B,GAAG,CAACC,QAAJ,CAAa,KAAb,CAAd;AACAL,kBAAAA,IAAI,CAACG,GAAD,EAAM9B,KAAN,CAAJ;AACD,iBAHD;AAID,eANa;AAAA;AAAA;AAAA;AAAA;AAAA,wCAOd,kBAAgBA,KAAhB,EAAuBiC,IAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQlD,0BAAAA,IADR,GACe,sCADf;AAAA;AAAA;AAAA,iCAI2B4B,eAAGC,KAAH,CAAS7B,IAAT,EAAe,CAACF,GAAG,CAACG,IAAJ,CAASC,KAAV,CAAf,CAJ3B;;AAAA;AAAA;AAIY4B,0BAAAA,IAJZ,SAIYA,IAJZ;;AAAA,8BAMSA,IAAI,CAAC,CAAD,CANb;AAAA;AAAA;AAAA;;AAAA,4DAOa/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,4BAAAA,MAAM,EAAE,GAAV;AAAeE,4BAAAA,KAAK,EAAE;AAAtB,2BAArB,CAPb;;AAAA;AASI4C,0BAAAA,IAAI,GAAGpB,IAAI,CAAC,CAAD,CAAX;AATJ;AAAA;;AAAA;AAAA;AAAA;AAAA,4DAWW/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,4BAAAA,KAAK;AAAP,2BAArB,CAXX;;AAAA;AAcQ6C,0BAAAA,aAdR,GAcwBC,uBAAWC,eAAX,CAA2B;AAC/CC,4BAAAA,OAAO,EAAE,OADsC;AAE/CC,4BAAAA,IAAI,EAAE;AACJL,8BAAAA,IAAI,EAAE,sBADF;AAEJM,8BAAAA,IAAI,EAAE1C,OAAO,CAACC,GAAR,CAAY0C;AAFd;AAFyC,2BAA3B,CAdxB;AAqBQC,0BAAAA,WArBR,GAqBsB;AAClBC,4BAAAA,EAAE,EAAET,IAAI,CAAChD,KADS;AAElB0D,4BAAAA,IAAI,EAAE,uBAFY;AAGlBC,4BAAAA,OAAO,EAAE,gBAHS;AAIlB7D,4BAAAA,IAAI,EAAE,sKACqCkD,IAAI,CAAC/C,QAD1C,IAEF;AANc,2BArBtB;AA6BEgD,0BAAAA,aAAa,CAACW,QAAd,CAAuBJ,WAAvB,EAAoC,YAAY;AAC9CK,4BAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,mCAAOjE,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,8BAAAA,MAAM,EAAE,GAAV;AAAe6D,8BAAAA,IAAI,sCAA+Bf,IAAI,CAAChD,KAApC;AAAnB,6BAArB,CAAP;AACD,2BAHD;AA7BF,4DAiCS,IAjCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPc;;AAAA;AAAA;AAAA;AAAA,kBAAhB;;AA7GS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;eA6JeN,I","sourcesContent":["\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable prefer-destructuring */\r\n/* eslint-disable prefer-arrow-callback */\r\n/* eslint-disable func-names */\r\nimport '@babel/polyfill';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport bcrypt from 'bcrypt';\r\nimport async from 'async';\r\nimport nodemailer from 'nodemailer';\r\nimport crypto from 'crypto';\r\nimport dotenv from 'dotenv';\r\nimport db from '../db';\r\n\r\n\r\ndotenv.config();\r\n\r\n\r\nconst User = {\r\n\r\n  /**\r\n   * Create A User\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} user object\r\n   */\r\n  async create(req, res) {\r\n    const text = `INSERT INTO\r\n      Users(id, token, email, first_name, last_name, password, is_admin, address, created_date, modified_date)\r\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      returning *`;\r\n    // handling no input value to sign up a user.\r\n    if (!req.body.email || !req.body.password) {\r\n      return res.status(400).send({ status: 400, error: 'please fill in required fields' });\r\n    }\r\n\r\n    // generate user token\r\n    const payload = { email: req.body.email, id: uuidv4(), isAdmin: req.body.is_admin };\r\n    const options = { expiresIn: '2d' };\r\n    const secret = process.env.TOKEN;\r\n    req.body.token = jwt.sign(payload, secret, options);\r\n\r\n    const values = [\r\n      uuidv4(),\r\n      req.body.token,\r\n      req.body.email,\r\n      req.body.first_name,\r\n      req.body.last_name,\r\n      // eslint-disable-next-line no-unused-vars\r\n      bcrypt.hashSync(req.body.password, 10, (error, hash) => {\r\n        if (error) { return ({ error: 'error found' }); } return null;\r\n      }) || '',\r\n      req.body.is_admin,\r\n      req.body.address,\r\n      moment(new Date()),\r\n      moment(new Date()),\r\n    ];\r\n\r\n\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n      const data = (rows[0]);\r\n      return res.status(201).send({ status: 201, data });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n  /**\r\n       * //sign in a user\r\n       * @param {object} req\r\n       * @param {object} res\r\n       * @returns {object} return user Object\r\n       */\r\n  async getOne(req, res) {\r\n    const text = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await db.query(text, [req.body.email]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: `A user with the specified email: ${req.body.email} was not found` });\r\n      }\r\n      // check if user password is correct\r\n      bcrypt.compare(req.body.password, rows[0].password, (error, result) => {\r\n        if (result) {\r\n          const data = rows[0];\r\n          return res.status(200).send({ status: 200, data });\r\n        }\r\n        return res.status(401).send({ status: 401, error: 'Authentication information is invalid' });\r\n      });\r\n    } catch (error) {\r\n      return res.status(401).send({ status: 401, error: 'Please enter valid email and password' });\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // Get all users\r\n  async getAll(req, res) {\r\n    const findAllQuery = 'SELECT * FROM users';\r\n    try {\r\n      const { rows } = await db.query(findAllQuery);\r\n      return res.status(200).send({ status: 200, rows });\r\n    } catch (error) {\r\n      return res.status(401).send({ status: 401, error: 'No user found' });\r\n    }\r\n  },\r\n  // delete users\r\n  async delete(req, res) {\r\n    // const decode = jwt.verify(req.headers.token, process.env.TOKEN);\r\n    try {\r\n      const deleteQuery = 'DELETE FROM users WHERE id=$1 returning *';\r\n      const findOneQuery = 'SELECT * FROM users WHERE id=$1';\r\n\r\n      req.params.id = req.params.userId;\r\n      const { rows } = await db.query(findOneQuery, [req.params.id]);\r\n\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ status: 404, error: 'User not found to delete' });\r\n      }\r\n      await db.query(deleteQuery, [rows[0].id]);\r\n      return res.status(200).send({ status: 200, data: 'User successfully deleted' });\r\n    } catch (error) {\r\n      return res.status(400).send({ status: 400, error });\r\n    }\r\n  },\r\n\r\n  // Reset Password\r\n  async updatePassword(req, res) {\r\n    async.waterfall([\r\n      function (done) {\r\n        crypto.randomBytes(20, (err, buf) => {\r\n          const token = buf.toString('hex');\r\n          done(err, token);\r\n        });\r\n      },\r\n      async function (token, user) {\r\n        const text = 'SELECT * FROM users WHERE email = $1';\r\n        try {\r\n          // req.body.email = req.params.useremail;\r\n          const { rows } = await db.query(text, [req.body.email]);\r\n\r\n          if (!rows[0]) {\r\n            return res.status(404).send({ status: 404, error: 'No user account with the email already exist' });\r\n          }\r\n          user = rows[0];\r\n        } catch (error) {\r\n          return res.status(401).send({ error });\r\n        }\r\n\r\n        const smtpTransport = nodemailer.createTransport({\r\n          service: 'Gmail',\r\n          auth: {\r\n            user: 'wisdomvoke@gmail.com',\r\n            pass: process.env.GWP,\r\n          },\r\n        });\r\n        const mailOptions = {\r\n          to: user.email,\r\n          from: 'vokeolomu01@gmail.com',\r\n          subject: 'Password Reset',\r\n          text: 'You are receiving this because you (or someone else) have requested the reset of the password for your account.\\n\\n'\r\n            + `Please see below for your password: ${user.password}`\r\n            + 'If you did not request this, please ignore this email and your password will remain unchanged.\\n',\r\n        };\r\n        smtpTransport.sendMail(mailOptions, function () {\r\n          console.log('mail sent');\r\n          return res.status(404).send({ status: 404, info: `An email has been sent to ${user.email} containing your password` });\r\n        });\r\n        return null;\r\n      },\r\n    ]);\r\n  },\r\n\r\n};\r\n\r\n\r\nexport default User;\r\n"],"file":"userController.js"}