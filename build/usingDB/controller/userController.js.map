{"version":3,"sources":["../../../SERVER/usingDB/controller/userController.js"],"names":["User","create","req","res","text","body","token","jwt","sign","email","process","env","TOKEN","values","firstname","lastname","bcrypt","hashSync","password","error","hash","message","is_admin","Date","db","query","rows","user","status","send","getOne","compare","result","Authentication_failed","signedUser"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\";\r\nimport db from '../db';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nimport uuidv4 from 'uuid/v4';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst User = {\r\n\r\n    /**\r\n   * Create A User\r\n   * @param {object} req \r\n   * @param {object} res\r\n   * @returns {object} user object \r\n   */\r\n    async create(req, res) {\r\n        const text = `INSERT INTO\r\n      Users(id, token, email, firstname, lastname, password, is_admin, created_date, modified_date)\r\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n      returning *`;\r\n        req.body.token = jwt.sign(req.body.email, process.env.TOKEN);\r\n        const values = [\r\n            uuidv4(),\r\n            req.body.token,\r\n            req.body.email,\r\n            req.body.firstname,\r\n            req.body.lastname,\r\n            bcrypt.hashSync(req.body.password, 10, (error, hash) => {\r\n                if (error) {\r\n                    return ({ message: 'error found' });\r\n                }\r\n            }) || '',\r\n            req.body.is_admin,\r\n            moment(new Date()),\r\n            moment(new Date())\r\n        ];\r\n         try {\r\n            const { rows } = await db.query(text, values);\r\n            const user = (rows[0]);\r\n            return res.status(201).send({status: 201, user});\r\n        } catch (error) {\r\n             return res.status(400).send({ status: 400, error });\r\n         }\r\n    },\r\n    /**\r\n       * //sign in a user\r\n       * @param {object} req \r\n       * @param {object} res\r\n       * @returns {object} return user Object\r\n       */\r\n    async getOne(req, res) {\r\n        const text = 'SELECT * FROM users WHERE email = $1';\r\n        try {\r\n            const { rows } = await db.query(text, [req.body.email]);\r\n            \r\n            if (!rows[0]) {\r\n                return res.status(404).send({ status: 404, error: `A user with the specified ${req.body.email} was not found` });\r\n            }\r\n            bcrypt.compare(req.body.password, rows[0].password, (error, result) => {\r\n                if (error) {\r\n                    return res.status(401).send({ status: 401, Authentication_failed: 'Authorization information is missing or invalid' });\r\n                } if (result) {\r\n                    const signedUser = rows[0];\r\n                    return res.status(200).send({status: 200, signedUser});\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            return res.status(401).send({ status: 401, error: 'Please enter valid email and password' })\r\n        }\r\n    },\r\n}\r\n\r\nexport default User;\r\n"],"file":"userController.js"}