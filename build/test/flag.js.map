{"version":3,"sources":["../../SERVER/test/flag.js"],"names":["chai","use","chaiHttp","should","process","env","NODE_ENV","describe","userOne","email","password","flagOne","id","car_id","reason","description","status","created_date","modified_date","flagTwo","userToken","before","request","server","post","send","result","equal","body","user","token","it","eql","error","set","be","a","flag","have","property"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport server from '../app';\r\n\r\nchai.use(chaiHttp);\r\nshould = chai.should();\r\n\r\n// During the test the env variable is set to test\r\nprocess.env.NODE_ENV = 'test';\r\n\r\n\r\n// Our parent block\r\ndescribe('FLAG', () => {\r\n  const userOne = {\r\n    email: 'testemail@gmail.com',\r\n    password: 'password',\r\n  };\r\n\r\n  const flagOne = {\r\n    id: 1,\r\n    car_id: 3,\r\n    reason: 'first reason',\r\n    description: 'first description',\r\n    status: 'available',\r\n    created_date: 12345,\r\n    modified_date: 12345,\r\n  };\r\n  const flagTwo = {\r\n    id: 2,\r\n    car_id: 4,\r\n    reason: 'second reason',\r\n    description: 'second description',\r\n    status: 'pending',\r\n    created_date: 12345,\r\n    modified_date: 12345,\r\n  };\r\n\r\n  let userToken;\r\n\r\n  before(async () => {\r\n    const result = await chai\r\n      .request(server)\r\n      .post('/api/v1/auth/signup')\r\n      .send(userOne);\r\n    result.status.should.equal(201);\r\n    userToken = result.body.user.token;\r\n  });\r\n  describe('/POST api/v1/flag', () => {\r\n    it('it should return a 401 authentication failed', async () => {\r\n      const result = await chai\r\n        .request(server)\r\n        .post('/api/v1/flag')\r\n        .send(flagOne);\r\n      result.status.should.equal(401);\r\n      result.body.should.eql({ status: 401, error: 'Authentication failed' });\r\n    });\r\n\r\n    it('it should return a 201 response upon authorization', async () => {\r\n      const result = await chai\r\n        .request(server)\r\n        .post('/api/v1/flag')\r\n        .set('Authorization', userToken)\r\n        .send(flagOne);\r\n      result.status.should.equal(201);\r\n    });\r\n\r\n    it('it should be an object with keys and values for authorised login', async () => {\r\n      const result = await chai\r\n        .request(server)\r\n        .post('/api/v1/flag')\r\n        .set('Authorization', userToken)\r\n        .send(flagTwo);\r\n      result.body.should.be.a('object');\r\n      result.status.should.equal(201);\r\n      result.body.flag.should.have.property('reason');\r\n      result.body.flag.should.have.property('car_id');\r\n      result.body.flag.reason.should.equal('second reason');\r\n      result.body.flag.should.have.property('description');\r\n    });\r\n    it('it should return a 400 error if required fields are missing for authorized login', async () => {\r\n      const result = await chai\r\n        .request(server)\r\n        .post('/api/v1/flag')\r\n        .set('Authorization', userToken)\r\n        .send({});\r\n      result.body.should.be.a('object');\r\n      result.status.should.equal(400);\r\n      result.body.should.eql({ status: 400, error: 'please enter car Id and reason for report' });\r\n    });\r\n  });\r\n});\r\n"],"file":"flag.js"}