{"version":3,"sources":["../SERVER/db.js"],"names":["require","Pool","dotenv","config","pool","connectionString","process","env","DATABASE_URL","ssl","on","console","log","createCarTables","queryText","query","then","res","end","err","createOrderTables","createUserTables","createFlagTables","dropCarTables","dropOrderTables","dropUserTables","dropFlagTables","exit","module","exports"],"mappings":"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","sourcesContent":["\r\nconst { Pool } = require('pg');\r\nconst dotenv = require('dotenv');\r\n\r\n\r\ndotenv.config();\r\n\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL, ssl: true\r\n});\r\n\r\npool.on('connect', () => {\r\n  console.log('connected to the db');\r\n});\r\n\r\n/**\r\n * Create Tables\r\n */\r\nconst createCarTables = () => {\r\n  const queryText =\r\n    `CREATE TABLE IF NOT EXISTS\r\n      cars(\r\n        id UUID PRIMARY KEY,\r\n        created_on VARCHAR(128) NOT NULL,\r\n        manufacturer VARCHAR(128) ,\r\n        price VARCHAR(128) ,\r\n        owner VARCHAR(128) ,\r\n        state VARCHAR(128) ,\r\n        status VARCHAR(128) ,\r\n        body_type VARCHAR(128) ,\r\n        model VARCHAR(128) ,\r\n        created_date TIMESTAMP,\r\n        modified_date TIMESTAMP\r\n      )`;\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n}\r\n\r\nconst createOrderTables = () => {\r\n    const queryText =\r\n      `CREATE TABLE IF NOT EXISTS\r\n        orders(\r\n            id UUID PRIMARY KEY,\r\n            created_on VARCHAR(128) NOT NULL,\r\n            car_id VARCHAR(128),\r\n            price VARCHAR(128) NOT NULL,\r\n            price_offered VARCHAR(128) NOT NULL,\r\n            old_price_offered VARCHAR(128),\r\n            new_price_offered VARCHAR(128),\r\n            buyer VARCHAR(128),\r\n            status VARCHAR(128)NOT NULL,\r\n            created_date TIMESTAMP,\r\n            modified_date TIMESTAMP\r\n        )`;  \r\n    pool.query(queryText)\r\n      .then((res) => {\r\n        console.log(res);\r\n        pool.end();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        pool.end();\r\n      });\r\n  }\r\n  const createUserTables = () => {\r\n    const queryText =\r\n      `CREATE TABLE IF NOT EXISTS\r\n        users(\r\n          id UUID PRIMARY KEY,\r\n          token VARCHAR(128) NOT NULL,\r\n          email VARCHAR(128) NOT NULL,\r\n          firstname VARCHAR(128) NOT NULL,\r\n          lastname VARCHAR(128) NOT NULL,\r\n          password VARCHAR(128) NOT NULL,\r\n          is_admin VARCHAR(128) NOT NULL,\r\n          created_date TIMESTAMP,\r\n          modified_date TIMESTAMP\r\n        )`;\r\n    pool.query(queryText)\r\n      .then((res) => {\r\n        console.log(res);\r\n        pool.end();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        pool.end();\r\n      });\r\n  }\r\n  const createFlagTables = () => {\r\n    const queryText =\r\n      `CREATE TABLE IF NOT EXISTS\r\n        flags(\r\n          id UUID PRIMARY KEY,\r\n          car_id VARCHAR(128) NOT NULL,\r\n          reason VARCHAR(128) NOT NULL,\r\n          description VARCHAR(128) NOT NULL,\r\n          created_on TIMESTAMP,\r\n          modified_date TIMESTAMP\r\n        )`;\r\n    pool.query(queryText)\r\n      .then((res) => {\r\n        console.log(res);\r\n        pool.end();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        pool.end();\r\n      });\r\n  }\r\n      \r\n\r\n/**\r\n * Drop Tables\r\n */\r\nconst dropCarTables = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS cars';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n}\r\n/**\r\n * Drop Tables\r\n */\r\nconst dropOrderTables = () => {\r\n    const queryText = 'DROP TABLE IF EXISTS orders';\r\n    pool.query(queryText)\r\n      .then((res) => {\r\n        console.log(res);\r\n        pool.end();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        pool.end();\r\n      });\r\n  }\r\n  /**\r\n * Drop Tables\r\n */\r\nconst dropUserTables = () => {\r\n    const queryText = 'DROP TABLE IF EXISTS users';\r\n    pool.query(queryText)\r\n      .then((res) => {\r\n        console.log(res);\r\n        pool.end();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        pool.end();\r\n      });\r\n  }\r\n\r\n  /**\r\n * Drop Tables\r\n */\r\nconst dropFlagTables = () => {\r\n    const queryText = 'DROP TABLE IF EXISTS flags';\r\n    pool.query(queryText)\r\n      .then((res) => {\r\n        console.log(res);\r\n        pool.end();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        pool.end();\r\n      });\r\n  }\r\n\r\npool.on('remove', () => {\r\n  console.log('client removed');\r\n  process.exit(0);\r\n});\r\n\r\nmodule.exports = {\r\n  createCarTables,\r\n  createFlagTables,\r\n  createOrderTables,\r\n  createUserTables,\r\n  dropCarTables,\r\n  dropFlagTables,\r\n  dropOrderTables,\r\n  dropUserTables\r\n};\r\n\r\nrequire('make-runnable');\r\n\r\n"],"file":"db.js"}