{"version":3,"sources":["../SERVER/db.js"],"names":["require","Pool","dotenv","config","pool","process","env","NODE_ENV","connectionString","TEST_DATABASE_URL","ssl","DATABASE_URL","on","console","log","createCarTables","queryText","query","then","res","end","err","createOrderTables","createUserTables","createFlagTables","dropCarTables","dropOrderTables","dropUserTables","dropFlagTables","exit","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\r\n\r\nconst { Pool } = require('pg');\r\nconst dotenv = require('dotenv');\r\n\r\n\r\ndotenv.config();\r\n\r\nlet pool = new Pool();\r\n\r\nif (process.env.NODE_ENV === 'test') {\r\n  pool = new Pool({\r\n\r\n    connectionString: process.env.TEST_DATABASE_URL, ssl: true,\r\n  });\r\n} else {\r\n  pool = new Pool({\r\n\r\n    connectionString: process.env.DATABASE_URL, ssl: true,\r\n  });\r\n}\r\n\r\npool.on('connect', () => {\r\n  console.log('connected to the db');\r\n});\r\n\r\n/**\r\n * Create Tables\r\n */\r\nconst createCarTables = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n      cars(\r\n        id UUID PRIMARY KEY,\r\n        created_on VARCHAR(128),\r\n        manufacturer VARCHAR(128) ,\r\n        price VARCHAR(128) ,\r\n        owner VARCHAR(128) ,\r\n        state VARCHAR(128) ,\r\n        status VARCHAR(128) ,\r\n        body_type VARCHAR(128) ,\r\n        model VARCHAR(128) ,\r\n        created_date TIMESTAMP,\r\n        modified_date TIMESTAMP\r\n      )`;\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\nconst createOrderTables = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n        orders(\r\n            id UUID PRIMARY KEY,\r\n            created_on VARCHAR(128),\r\n            car_id VARCHAR(128),\r\n            price VARCHAR(128),\r\n            price_offered VARCHAR(128),\r\n            old_price_offered VARCHAR(128),\r\n            new_price_offered VARCHAR(128),\r\n            buyer VARCHAR(128),\r\n            status VARCHAR(128),\r\n            created_date TIMESTAMP,\r\n            modified_date TIMESTAMP\r\n        )`;\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\nconst createUserTables = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n        users(\r\n          id UUID PRIMARY KEY,\r\n          token VARCHAR(128),\r\n          email VARCHAR(128),\r\n          firstname VARCHAR(128),\r\n          lastname VARCHAR(128),\r\n          password VARCHAR(128),\r\n          is_admin VARCHAR(128),\r\n          created_date TIMESTAMP,\r\n          modified_date TIMESTAMP,\r\n          resetPasswordToken VARCHAR(128),\r\n          resetPasswordExpires VARCHAR(128)\r\n        )`;\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\nconst createFlagTables = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n        flags(\r\n          id UUID PRIMARY KEY,\r\n          car_id VARCHAR(128),\r\n          reason VARCHAR(128),\r\n          description VARCHAR(128),\r\n          created_on TIMESTAMP,\r\n          modified_date TIMESTAMP\r\n        )`;\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Drop Tables\r\n */\r\nconst dropCarTables = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS cars';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n/**\r\n * Drop Tables\r\n */\r\nconst dropOrderTables = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS orders';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n/**\r\n * Drop Tables\r\n */\r\nconst dropUserTables = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS users';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Drop Tables\r\n */\r\nconst dropFlagTables = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS flags';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\npool.on('remove', () => {\r\n  process.exit(0);\r\n});\r\n\r\nmodule.exports = {\r\n  createCarTables,\r\n  createFlagTables,\r\n  createOrderTables,\r\n  createUserTables,\r\n  dropCarTables,\r\n  dropFlagTables,\r\n  dropOrderTables,\r\n  dropUserTables,\r\n};\r\n\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nrequire('make-runnable');\r\n"],"file":"db.js"}