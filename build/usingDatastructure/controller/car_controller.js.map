{"version":3,"sources":["../../../SERVER/usingDatastructure/controller/car_controller.js"],"names":["Car","create","req","res","body","manufacturer","price","model","status","send","error","data","CarModel","email","getOne","car","findOne","params","carId","body_type","getAvailableCars","console","log","carsArray","findAvailableCars","query","getAvailableCarsByMake","findAvailableCarsByMake","getUpdatePrice","updateCarPrice","deleteCar","getUpdateStatus","specifiedCar","updateStatus","getFilterCars","findFilterCars","minPrice","maxPrice","getCarByBodyType","findCarByBodyType","getAll","findAll","getUsedAvailableCars","newAvailable","findNewAvailableCars","state","getNewAvailableCars"],"mappings":"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","sourcesContent":["import CarModel from '../model/car_model';\r\n\r\nconst Car = {\r\n  /**\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} car object\r\n   */\r\n  //post car to car array (as database)\r\n  create(req, res) {\r\n    if (!req.body.manufacturer && !req.body.price && !req.body.model) {\r\n      return res.status(400).send({ status: 400, error: 'All fields are required' });\r\n    }\r\n    const data = CarModel.create(req.body);\r\n    data.email = req.body.email;\r\n    return res.status(201).send({status: 201, data});\r\n  },\r\n  //view a specific car\r\n  getOne(req, res) {\r\n    const car = CarModel.findOne(req.params.carId);\r\n    if (!car) {\r\n      return res.status(404).send({ status: 404, error: 'car not found'});\r\n    }\r\n    car.body_type = req.body.body_type || ' ';\r\n    return res.status(200).send({status: 200, car});\r\n  },\r\n  //view all available cars posted\r\n  getAvailableCars(req, res) {\r\n    console.log(\"getAvailablecars\")\r\n    const carsArray = CarModel.findAvailableCars(req.query.status);\r\n    return res.status(200).send({status: 200, carsArray});\r\n  },\r\n  //filter all available cars posted by manufacturer\r\n  getAvailableCarsByMake(req, res) {\r\n    const carsArray = CarModel.findAvailableCarsByMake(req.params.manufacturer, req.query.status);\r\n    return res.status(200).send({status: 200, carsArray});\r\n  },\r\n  //update price of car ad posted\r\n  getUpdatePrice(req, res) {\r\n    const car = CarModel.findOne(req.params.carId);\r\n    if (!car) {\r\n      return res.status(404).send({ status: 404, error: 'car not found' });\r\n    }\r\n    try {\r\n      const data = CarModel.updateCarPrice(req.params.carId, req.body.price);\r\n      return res.status(200).send({status: 200, data});\r\n    } catch (error) {\r\n      return res.status(404).send({ status: 404, error: 'cannot update price' });\r\n    }\r\n  },\r\n  //delete a specific car in array\r\n  delete(req, res) {\r\n    const car = CarModel.findOne(req.params.carId);\r\n    if (!car) {\r\n      return res.status(404).send({ status: 404, error: 'no car to delete' });\r\n    }\r\n    const data = CarModel.deleteCar(req.params.carId);\r\n    return res.status(200).send({status: 404, data});\r\n  },\r\n    //update status of car in array\r\n  getUpdateStatus(req, res) {\r\n    const car = CarModel.findOne(req.params.carId);\r\n    if (!car) {\r\n      return res.status(404).send({ status: 404, error: 'car not found' });\r\n    }\r\n    try {\r\n      const specifiedCar = CarModel.updateStatus(req.params.carId);\r\n      return res.status(200).send(specifiedCar);\r\n    } catch (error) {\r\n      return res.status(404).send({ status: 404, error: 'cannot update status' });\r\n    }\r\n  },\r\n  //search for cars based on price and status\r\n  getFilterCars(req, res) {\r\n    try {\r\n      const data = CarModel.findFilterCars(req.query.status, req.query.minPrice, req.query.maxPrice);\r\n      return res.status(200).send({status: 200, data});\r\n    } catch (error) {\r\n      res.status(404).send({ status: 404, error: 'cannot find cars' });\r\n    }\r\n  },\r\n   //search for available cars based on bodyType\r\n   getCarByBodyType(req, res) {\r\n    try {\r\n      const data = CarModel.findCarByBodyType(req.query.status, req.query.body_type);\r\n      return res.status(200).send({status: 200, data});\r\n    } catch (error) {\r\n      res.status(404).send({ status: 404, error: 'cannot find cars' });\r\n    }\r\n  },\r\n  /**\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} car array\r\n   */\r\n  //find all cars\r\n  getAll(req, res) {\r\n    const data = CarModel.findAll();\r\n    return res.status(200).send({status: 200, data});\r\n  },\r\n  getUsedAvailableCars(req, res){\r\n    const newAvailable = CarModel.findNewAvailableCars(req.query.status, req.query.state, req.body.manufacturer);\r\n    return res.status(201).send({status: 201, newAvailable});\r\n  },\r\n\r\n  getNewAvailableCars(req, res){\r\n    const newAvailable = CarModel.findNewAvailableCars(req.query.status, req.query.state, req.body.manufacturer);\r\n    return res.status(201).send({status: 201, newAvailable});\r\n\r\n  },\r\n\r\n}\r\n\r\nexport default Car;\r\n"],"file":"car_controller.js"}