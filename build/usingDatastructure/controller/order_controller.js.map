{"version":3,"sources":["../../../SERVER/usingDatastructure/controller/order_controller.js"],"names":["Order","create","req","res","body","price","price_offered","status","send","error","order","OrderModel","getUpdateOrderPrice","findOne","params","orderId","data","updateOrderPrice"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,KAAK,GAAG;AACZ;;;;;;AAMA;AACAC,EAAAA,MARY,kBAQLC,GARK,EAQAC,GARA,EAQK;AACf,QAAI,CAACD,GAAG,CAACE,IAAJ,CAASC,KAAV,IAAmB,CAACH,GAAG,CAACE,IAAJ,CAASE,aAA7B,IAA8C,CAACJ,GAAG,CAACE,IAAJ,CAASG,MAA5D,EAAoE;AAClE,aAAOJ,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,KAAK,EAAE;AAAtB,OAArB,CAAP;AACD;;AAED,QAAMC,KAAK,GAAGC,wBAAWV,MAAX,CAAkBC,GAAG,CAACE,IAAtB,CAAd;;AACA,WAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACD,MAAAA,MAAM,EAAE,GAAT;AAAcG,MAAAA,KAAK,EAALA;AAAd,KAArB,CAAP;AACD,GAfW;;AAgBZ;;;;;;AAMA;AACAE,EAAAA,mBAvBY,+BAuBQV,GAvBR,EAuBaC,GAvBb,EAuBkB;AAC5B,QAAMO,KAAK,GAAGC,wBAAWE,OAAX,CAAmBX,GAAG,CAACY,MAAJ,CAAWC,OAA9B,CAAd;;AACA,QAAI,CAACL,KAAL,EAAY;AACV,aAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,KAAK,EAAE;AAAtB,OAArB,CAAP;AACD;;AACD,QAAI;AACF,UAAMO,IAAI,GAAGL,wBAAWM,gBAAX,CAA4Bf,GAAG,CAACY,MAAJ,CAAWC,OAAvC,EAAgDb,GAAG,CAACE,IAAJ,CAASE,aAAzD,CAAb;;AACA,aAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACD,QAAAA,MAAM,EAAE,GAAT;AAAcS,QAAAA,IAAI,EAAJA;AAAd,OAArB,CAAP;AACD,KAHD,CAGE,OAAOP,KAAP,EAAc;AACd,aAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,KAAK,EAAE;AAAtB,OAArB,CAAP;AACD;AACF;AAlCW,CAAd;eAqCeT,K","sourcesContent":["import OrderModel from '../model/order_model';\r\n\r\nconst Order = {\r\n  /**\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} order object\r\n   */\r\n  //post order to array (as database)\r\n  create(req, res) {\r\n    if (!req.body.price && !req.body.price_offered && !req.body.status) {\r\n      return res.status(400).send({ status: 400, error: 'All fields are required' });\r\n    }\r\n\r\n    const order = OrderModel.create(req.body);\r\n    return res.status(201).send({status: 201, order});\r\n  },\r\n  /**\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} \r\n   */\r\n  //update price of order already posted\r\n  getUpdateOrderPrice(req, res) {\r\n    const order = OrderModel.findOne(req.params.orderId);\r\n    if (!order) {\r\n      return res.status(404).send({ status: 404, error: 'order not found' });\r\n    }\r\n    try {\r\n      const data = OrderModel.updateOrderPrice(req.params.orderId, req.body.price_offered);\r\n      return res.status(200).send({status: 200, data});\r\n    } catch (error) {\r\n      return res.status(404).send({ status: 404, error: 'cannot update price' });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Order;\r\n"],"file":"order_controller.js"}